version: '3'

# Esta exactamente igual que devServer.yml. Excepto react
volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  media: {}
  static: {}

services:
  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: admincu_production_postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.local/.postgres
    ports:
      - "5432:5432"

  redis:
    image: redis:6.0.9

  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: admincu_production_django
    depends_on:
      - postgres
    volumes:
      - ./django:/app/backend
      - static:/app/backend/static
      - media:/app/backend/media      
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - "8000:8000"
    command: /start

  react:
    build:
      context: .
      dockerfile: ./compose/production/react/Dockerfile
    stdin_open: true 
    image: admincu_production_react
    volumes:
      - ./react:/app/frontend
    ports:
      - 3000:3000
    command: npm start

  celeryworker:
    <<: *django
    image: admincu_production_celeryworker
    depends_on:
      - redis
      - postgres

    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: admincu_production_celerybeat
    depends_on:
      - redis
      - postgres

    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: admincu_production_flower
    ports:
      - "5555:5555"
    command: /start-flower

  # Nginx lo puso oscar
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - 80:8080
  #   volumes:
  #     - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
  #     - ./frontend/build:/var/www/frontend
  #   depends_on:
  #     - react
  